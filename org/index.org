#+TITLE:    zotherstupidguy log 
#+AUTHOR:    Mohamed Fouad
#+EMAIL:     zotherstupidguy@gmail.com
#+DESCRIPTION: daily log of zotherstupidguy life 
#+KEYWORDS:  emacs, mathematics, computer science, machine learning 
#+LANGUAGE:  en
#+STYLE:body {font-family: "Source Sans Pro Black",sans-serif;}
#+OPTIONS: H:3 num:0
#+TAGS: zpd0(0)  zpd1(1) zpd2(2)  number_theory set_theory proof_theory computational_theory problem_solving category_theory single_variable_calculas multi_variable_calculas vedic_mathematics graph_theory discerete_mathematics concerete_mathematics continous_mathematics statistics real_analysis grit top_universities studying_strategy data_structures algorithms artificial_intellegence machine_learning deep_learning bigdata R python puzzles { MOOC : coursera  stanford oxford MIT} { philosphy : socrates plato} book youtube blog competitive_programming C_programming  {algorithms : ConstructiveAlgorithms Strings Sorting Search GraphTheory Greedy  DynamicProgramming  BitManipulation  Recursion  GameTheory  NPComplete } 


{ @read : @read_book  @read_ebook }

*** VideoName                                                    :studentcan:
          - dfdfd :studentcann't:
          - dfdfddfdf :ZPD:



Hello, I am Mohamed Fouad a.k.a zotherstupidguy, a Software Philosopher living in Alexandria, Egypt; and this is my day-to-day b(log). 
I am available for [hire [link to google docs resume]]. 
This is an org-mode generated log (Org-Agenda, Org-Capture, tag-based organization) via those [[https://github.com/zotherstupidguy/dotfiles][dotfiles]] 
and acutal  [[https://github.com/zotherstupidguy/zotherstupidguy.github.io][source]] of this blog.

[[file:img/mo.jpg]]
----- 
* Tasks 
** TOD                                             :category_theory:MOOC:joy:
   - learn emacs M-x org-agenda
   - remmber org-capture importance
** TODO :work                         :number_theory:set_theory:proof_theory:
   - somthing new
** TODO :life:
   - another thing on Wed
** TODO Org-Agenda 
   - understand A
   - understand B
** TODO Org-Agenda 
   - understand C
   - uderstand D

   ----- 

* Grit :: Perseverance and Passion for Long-term Goals 
  :PROPERTIES:
  :DESCRIPTION: Must have Personal Traits via continous conditioning
  :CATEGORY: research
  :ZPT:      0
  :END:
  + Courage
    - understand that there are valuable lessons in defeat and that the vulnerability of perseverance is requisite for high achievement.  
    - 
    - 

    -----


* Top Universities
  :PROPERTIES:
  :DESCRIPTION: Examining Top Universities
  :CATEGORY: research
  :ZPT:      0
  :ORDERED:  t
  :END:
  Once in a while, I examine how Top Universities offer their mathematics and computer science related programs. I try to find what kind of books they set as 
  textbooks, to go read them on my own, purchase them from Amazon (I only like *Hardcover* books!), or scout them in the cheap 2nd hand street book markets. 
  My act is inspired by *“You wasted $150,000 on an education you coulda got for $1.50 in late fees at the public library.” ― Matt Damon, Good Will Hunting*. 
  I worship those Professors who offer their courses online for free! If it is up to me I build them real-size human sculptures in my City. 
  *Knoweldge belong to all mankind, not to copyright owners who suffer from financial insecurities!*
  - ddf
  - dfdf
  ----- 

* Studying Strategy 
** Synopsis  
   My study strategy says that each book, videocourse, etc. is in one direcotry. This is my study log, I keep all the

   knowledge that I aquire into this file, and I organize it accordingly.

   Naturally I could write a book or two from the notes I have written into this file. As a matter of fact, I belive that
   the only way computer scientets are capable of writing so many powerful books is due to the fact that they use
   emacs in a similar way to what i am doing here, I can collect information and tag it, search it easily and update it,
   check cross referencing, etc. it is really awesome. I think i will keep taking notes in notebooks and as a reviesion I 
   will transfer the notes to here. I expect to be able to have codeblocks, latex formulas and maybe some progress
   graphs.

   Publish a series about computer science via https://leanpub.com, 
   call it "hackspree computer science series", each volume is small 100pages book of notes and commentary. 

   Make this log.org file my personal blog on zotherstupidguy.github.io, all in just one big huge page to get so many fucken hits.
   This log is published via an autoback configuration from Emacs, meaning that some times drafts are included.

*** Zone of Proximal Development [1/2]
    If i am studying a book, I can label its chapters as Done, TODO, or without label.
**** DONE is  I-can
**** TODO is ZPD 
**** notag is I-can't

*** Cronell Note Taking System
    trying to find a CornellNoteTakingSystem mode for Emacs.

**** SQ3R

*** Finding Sources
    using ./link to automatically download new youtube videos and generate an RSS of it and update log.org with a TODO for watching new things.
    I can't add ZPT, can, and can't folders in the sources folders as it will make ./link difficult to know what already got downloaded.

*** Emacs Tips
    Must read http://orgmode.org/manual/Working-with-source-code.html#Working-with-source-code as it explains literate programming could help me figure out how 
    to write code in emacs and export it to external files and vice-versa.  
    M- left arrow can make org elements go to sub
    Because I am using Evil-mode I can simply paste using P or p, same as vim's http://vim.wikia.com/wiki/Copy,_cut_and_paste
**** TODO find a way to do org-plot
*** Email
    access all emails from emacs for easy regex search
*** IRC [0/1]
    dfdfd
    
    access IRC from inside emacs to automatically log all important channels and always search them for answers before going online.
    erc works awesome ;) 
**** TODO
     - find some nice configruations for erc
     - Register username/password
     - log all opened channels automatically everytime emacs starts
     - back them up automatically somehow. 

*** Backup
    search for an emacs mode that would allow you to backup my files automatically somehow to googledrive/ github/ or server.
    I prefer Github, that way I can auto publish everytime I make an edit on the file (maybe a job that runs every hour or so).

    https://github.com/ryuslash/git-auto-commit-mode
*** Time Management
    using ClockWork app, I work only for 10mins to take 5mins break and a rest every 10x3. 
    it is like this because to move slowly is better than being depressed and not moving at all.

*** LaTex
*** RSS
    upwork rss jobs and other stuff.
    http://pragmaticemacs.com/category/elfeed/

*** Git
    need to use 'maget

*** Citations [0/1]
**** TODO 
     find somthing like org-ref http://kitchingroup.cheme.cmu.edu/blog/2014/05/13/Using-org-ref-for-citations-and-references/ 
     this way we can provide citations for the things we have in Sources Directory
    

     -----

*** Calender 
    - http://jameswilliams.be/blog/2016/01/11/Taming-Your-GCal.html
    - http://cestlaz.github.io/posts/using-emacs-26-gcal/#.WJ48TSFNy00
    - http://opensourceforu.com/2016/04/master-the-calendar-centering-macros-and-drawing-tools-in-gnu-emacs/


** Vision of the Future
   
** Strategic Formulation and Implementation
   - why is it worth the effort?
   - what should be persued? 
   - how it will be persued?
   - Group problems according to 
   
   The 7 Pillars of Strategic Thinking:
   1. Strategic Intent
   2. Strategic Analysis and Gathering of Intelligence
   3. Strategic Preparation of Resources
   4. Concentration of Force
   5. Disciplined Execution and Detailed Tactical Follow-Through 
   6. Adaptability
   7. The Study of General Principles﻿

** Managerial Role in Strategy Making	

** Control	
   My most basic studytime unit  is t = 10mins, henceforth all my study and practice activites are divided up in units of 10mins.

   I categorieze my incoming infromation into 3 categories: 
   A. Can,    12 problems, total 12t(2hrs)
   B. ZPD,    4 problems, total 12t(2hrs)
   C. Can't.  1 problem, total 12t(2hrs)
   
   I start my day trying to attack category *C. Can't* to fail and study a bit, 
   then go for the *B.ZPD* which is my zone of proximal development, 
   with some effort I can succeed in solving a problem in 30mins.
   then I end my day with the *A.can* somthing that I solved before or know I can solve. Simple Objectives results in Simple Delights makes me happy at the end of the day. 

   After Studying or Practice, blog about it using the Feynman Technique,  

   All problems are solved in C with emacs templates to save time.

** Managerial Role in Implementation	

** Strategy Making

** Process and Outcome	

   Refs: 
   - Learn Faster with The Feynman Technique
   https://www.youtube.com/watch?v=FrNqSLPaZLc

   - How to Learn Faster with the Feynman Technique:  
   https://www.youtube.com/watch?v=_f-qkGJBPts


* Sources
  This file contains links to all the material to study, :can:zpd:can't:anytag:
  *Six Thinking* Hats in solving ~competitive programming~ questions.
  *bold* /italics/ _underline_ ~verbatim~ +strike-through+

* TTC Video David Roochnik Platos Republic



* TTC VIDEO - The Art and Craft of Mathematical Problem Solving :problemsolving:
  :PROPERTIES:
  :ZPT: 0
  :DESCRIPTION: This is an online course blahblah
  :CATEGORY: problemsolving
  :CUSTOM_ID: an-extra-special-headline
  :END:
  * Diference between Problem and Exercise :: Scope doesn't work as expected, and messes everything up
       when loops mix variables up in recursive functions.
       - Namespaces :: You wish. 
       - Header Files :: Nope.
     information about the source here, author, edition, date, who is using it in univ cources, etc.
     

* Elementry Number Theory - 6th Edition - Kenneth H. Rosen 
***** Chapter1
****** Introduction  :zpd:numbertheory:
       (p) somthing is a predicate
       (i) somthing is impelied
       (q)
       tags for can, cannot, zpd
*****  Source
      could be google drive linkk 
      [[file:3.Sources/NumberTheory/Books/Elementary%20Number%20Theory%20-%206th%20Edition%20-%20Kenneth%20H.%20Rosen.pdf][file:3.Sources/NumberTheory/Books/Elementary Number Theory - 6th Edition - Kenneth H. Rosen.pdf]]  

      

* Introduction to the Theory of Computation - 3rd - Spiser
  
   -----


* hackerrank                                :youtube:competitive_programming:
-----
* arabic competitive programming            :youtube:competitive_programming:
-----
* codejam                                   :youtube:competitive_programming:
-----
* codemasrytube                             :youtube:competitive_programming:
-----
* mycodeschool                              :youtube:competitive_programming:
-----
* saurabhschool                             :youtube:competitive_programming:
-----
* codinginterviewhub                        :youtube:competitive_programming:
-----
* conor                                     :youtube:competitive_programming:
-----
* geeksforgeeks                             :youtube:competitive_programming:
-----


* HackerRank :hackerrank:practice:mathematics:
----- 
* HackerRank :hackerrank:practice:mathematics:fundamentals:
----- 
* HackerRank :hackerrank:practice:mathematics:numbertheory:
----- 
* HackerRank :hackerrank:practice:mathematics:combinatorics:
----- 
* HackerRank :hackerrank:practice:mathematics:algebra:
----- 
* HackerRank :hackerrank:practice:mathematics:geometry:
----- 
* HackerRank :hackerrank:practice:mathematics:probability:
----- 
* HackerRank :hackerrank:practice:mathematics:linaralgebra:
  ssdfdfddfdff
----- 
* DataStructres
* Algorithms
** Warmup 
   
** Implementation 
* Tutorials 
** 30 Days of Code
** Cracking The Coding Interview
** 10 Days of Statistics


*** Specialized Skills
**** Artificial Intelligence
**** Distributed Systems
**** Regex
**** Security
**** Functions
**** Terminoloy and Concepts
**** Cryptography
*** Languages 
**** C++
**** Python
**** Ruby 
**** LinuxShell
**** Functional Programming


****** Contests 
******* RookieRank2 

* Birthday Cake Candles  :problem:hackerrank:contest:rookierank2:duplicates_in_array:zpd1:
** Problem (Predicates & Implications)
   Colleen is turning  \(n\)  years old! 
   She has  \(n\)  candles of various heights on her cake, 
   and candle \(i\) has height \(heighti\) . Because the taller candles tower over the shorter ones, Colleen can only blow out the tallest candles.
   Given the  for each individual candle, find and print the number of candles she can successfully blow out.
** Input Format
   The first line contains a single integer, , denoting the number of candles on the cake. 
   The second line contains  space-separated integers, where each integer  describes the height of candle .
** Constraints
   somthing
** Output Format
   Print the number of candles Colleen blows out on a new line.
** Solution (Questions, Predicates & Implications) 
   the brute force solution gives O(N^2) via comparing each of two strings. 
   A common technique is the trade-off between time and space. 
   we want to make the algorithm faster, we can think of how to use more memory to solve the problem. .
   The keyphrase “find duplicate”, is translated to "use a hash set" immediately,  as hash is the most common technique to detect duplicates. 
   If we store every element into a hash set, we can make it O(N) for both time and space complexity.
   #+BEGIN_SRC ruby
     def input
       p "love emacs, because emacs is a philosphy of how yo all dealing with computer..."
     end
     def output
     end       
     input
   #+END_SRC

   #+RESULTS: 
   : love emacs, because emacs is a philosphy of how yo all dealing with computer

** References       
   - source: https://www.hackerrank.com/contests/rookierank/challenges/birthday-cake-candles
   - ref: http://blog.gainlo.co/index.php/2016/05/10/duplicate-elements-of-an-array/

   ----- 

* ProblemName KnightL on a Chessboard
** ProblemStatment 
   is a chess piece that moves in an L shape. We define the possible moves of  as any movement from some position  to some  satisfying either of the following:
** Input Format 
** Constraints
** Out Format
** Solution 
** References       
   - not related to the problem but good to notice https://en.wikipedia.org/wiki/Knight's_tour
     

   ----- 
* Theatre Square :website:codeforces:contest:

  source: http://codeforces.com/contest/1/problem/A
  ----- 

* Cracking the Coding Interview  :book:zpd:interview:
  keep log of all the interviews I made and schedules for upcoming interviews, as well as info for mastering the
  art of interviews. 
  
  Some people make multiple interviews with fake names, imporsnating someone who doens't
  have a public profile photo on twitter and github, they require a fake skypename for that! You are too lazy for this :))

* Gitlapse :ruby:startup:opensource:git:
   + Improvments 
     - Use ElDoc-mode in emacs to identify what is going on while writing the code, and then text-to-speech the output of ElDoc mode and create a video out of it.
     - Create a Gitlapse-mode for doing all my stuff?? maybe not a great idea. But wasamasa can help and tehn Emacsers can do this gitlapse thing on their own machines.
* Mushin :ruby:opensource:ddd:
* Utter :ruby:
  **autonmous :ruby:
  What are Microservices? they are hexagons
  Hexagonal architecture (paper introduced by whom?)
  independent processes communicate over APIs high degree of autonomy- take one ser
  small, focused on doing one thing well, unix philosphy
  microservices is just an opinonated way of SOA.
  small autonomous services that work together, independant processes communicating over APIs, focused on one thing and doing one thing well.
  Better alignment with the organizsation.
  exaptation
  Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organizationâs communication structure.
  Monolith application
  target security concern enalbe segregation models
  Adopt a balanced portfolio of risk around technology.
  not locked into a single programming idiom
  Principles of MicroServices
  Modelled around business domain
  Culture of Automation
  Hide Implementation details
  Decentralise all the things
  Deploy independently
  Consumer first
  Modeling around Business Domain
  Presentation - Business Logic - Data Access
* SSD                                                            :@work:ruby:
** somthing                                                :@home:ruby:
   SSD is a ruby datastore
* UpWork :website:work:
** Rails
** Ruby
** Python
** Django

* Penetration Testing :security:hacking:

* Companies I like to work for
- Thoughtbot
- Github
- Google
- Amazon
- Thoughtworks
- Gitlab
- Facebook
- Twitter
- Hackerrank
----- 

* How to use emacs in my life?
So the idea is that I while I want to code, I code in C or ruby file using its respective emacs-mode and its capabilities, but when i want to take notes and log it into my blog, 
I use org-capture. as I am very neat and I know what kind of stuff I add into my single-page blog, I have created many templates to my various data contents, 
example: if i am solving a hackerrank problem and i got it to pass, and now I want to add it to my blog, I just press C-cc followed by h or similar to start editing the hackerrank template, C-c C-c to finish 
and have it saved to the end of my blog with all the correct tags that gets viewed via emacs agenda later on. 

This is so powerful that I can create many powerful org-capture templates and save it in my .emacs and keep enhancing them to reflect my level of performance in study, practice and work. 

*use C-c \* to search for zpd0, zpd1, zpd2 tags and find what you are trying to do that day, and C-c C-c to choose the tags

** PracticeTips:
    - Whenever you solve some questions, try to ask yourself what if we *expand the question to a larger scale!*
    - *Revisit old problems* and think about new techqinues, better ways, different contexts, different constrains, etc.  
    - every solution is a finite state automata
**  use inf-ruby more often please
    ;; inf-ruby
    ;;Use C-c C-s to launch the inf-ruby process.
    ;;Use C-x o to switch to the inf-ruby pane and try running some random ruby snippets as you normally would from IRB or pry.
    ;;Go back to your Ruby buffer, select (by highlighting) a chunk of code, and use C-c C-r to push that Ruby code into the IRB session.
    ;;For example, try defining a class in your Ruby buffer, select the whole buffer, run C-c C-r, then swap over to the inf-ruby buffer and instantiate an instance of your class. Pretty cool!
    ;;Alternatively, use C-c M-r to run a selected chunk of code and automatically go to the ruby buffer
    ;;Finally, use helm-M-x (which we bound earlier to the default M-x keybinding) to search for âruby sendâ and see what other default bindings inf-ruby gives us.
    ;;If you do a lot of work in Rails or Sinatra, check out the commands inf-ruby-console-rails and inf-ruby-console-racksh. Using these commands inf-ruby can start a console session in the environment of your web project.
    (autoload 'inf-ruby-minor-mode "inf-

** TODO
   - create templates for hackerrank problems, store in zotherstupidguy.github.io/org/templates/hackerrank.text
   - codeforces problems, store in zotherstupidguy.github.io/org/templates/codeforces.text
   - experiment with org-mode agenda to view my headings based on their tags? or a smiliar functionality from somthing else maybe! 
   - use org-capture for saving common algorithms in C. eg. sorting.c shortestpath.c, etc.
   - find the ability to query my huge org file.  
   - on emacs open, make sure it opens scratch and also opens index.org and make index.org the active buffer to easily edit.
   - org-capture template for Questions, Predicates, and Implications

** Emacs Agenda :agenda:
   The agenda allows you to create filtered views of the items in your 
   *agenda files*("day-planner" views of your schedule, lists of your todos, and the results of queries (for tags, words, regular expressions, etc.)).

   One use of the agenda is as a day planner system. If you prefer to schedule your tasks and to see a daily agenda of TODOs, you'll probably be pressing C-c a a a lot.
   The agenda can also be used for a powerful GTD system. If you like to filter your "next actions" by context, 
   then you'll probably make frequent use of C-c a t to see a list of all your active TODOs and to filter them by tag/context.
   While the agenda is a powerful task management tool, it is also a fantastic research tool. If you keep a file full of reading notes, 
   for instance, you can use the agenda to locate entries containing a particular word or labeled by a particular tag.

   *Do you want quickly to filter for the item in the agenda view? If so, a tag is probably your best choice.*
   Note, you can add a setting to your .emacs that automatically adds a tag whenever you assign a particular TODO keyword. Type "C-c v org-todo-state-tags-triggers" for more information.
   An excellent way to implement labels and contexts for cross-correlating information is to assign tags to headlines. Org mode has extensive support for tags.

   Every headline can contain a list of tags; they occur at the end of the headline. Tags are normal words containing letters, numbers, ‘_’, and ‘@’. Tags must be preceded and followed by a single colon, e.g., ‘:work:’. Several tags can be specified, as in ‘:work:urgent:’. Tags will by default be in bold face with the same color as the headline.

   Tag inheritance: Tags use the tree structure of the outline
   Setting tags: How to assign tags to a headline
   Tag groups: Use one tag to search for several tags
   Tag searches: Searching for combinations of tags
   ref: http://orgmode.org/guide/Tags.html#Tags
  
* Hackertyper for reviewing practiced algorithms
  I should use hackertyper to review practiced algorithms,
  ref: http://www.hackertyper.com/

* ZotherZPD Index
  - Can't is *0  =  ZPD0, thus I name respective headings with :zpd0:
  - ZPD is *1    = ZPD1, thus I name respective headings with :zpd1;
  - Can is *2    = ZPD2, thus I name respective headings with :zpd2:
  According to this index I can *automatically* calculate (via emacs) a score * 0 or * 1 or * 2 / by the number of shit I am trying to accomplish.

* hackerrank api for my "emacsContest.el"
  I want to create *emacsContest.el* to holdplace to where programmers can contribute to the API integration of CP websites.
  https://www.hackerrank.com/api/docs provides an api that I want to use when a contest starts to:
  - get a list of all the problems of the contest
  - parse and map the statment, constraints, input, ouput, and sample data into an org-capture template that i will store into my blog.
  - submit my sourcecode(C or Ruby) via the api via an emacs shortcut. 
  - show a buffer with all status of who solved the problem and the percentage of it. 


